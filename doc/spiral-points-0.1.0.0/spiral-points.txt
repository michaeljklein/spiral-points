-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/michaeljklein/spiral-points#readme</a>
@package spiral-points
@version 0.1.0.0

module Data.Runs

-- | Lists with runs of equal values replaced with <tt>(number of elements
--   in the run, the repeated value)</tt>
newtype Runs a
Runs :: [(Int, a)] -> Runs a
[getRuns] :: Runs a -> [(Int, a)]

-- | Convert a list to <a>Runs</a>, one half of an isomorphism:
--   
--   <pre>
--   forall a. Eq a =&gt; Iso' [a] (Runs a)
--   </pre>
toRuns :: Eq a => [a] -> Runs a
instance GHC.Show.Show a => GHC.Show.Show (Data.Runs.Runs a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Runs.Runs a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Runs.Runs a)
instance Data.Foldable.Foldable Data.Runs.Runs


-- | Want: Efficient (I think we can get near constant-time) conversion
--   between a point <tt>(Integer, Integer)</tt> and its "spiral number":
--   <a>Natural</a>
module Lib

-- | A point in <tt>Z^2</tt>
newtype Pt
Pt :: (Integer, Integer) -> Pt
[getPr] :: Pt -> (Integer, Integer)

-- | <a>undefined</a>
--   
--   Convert a <a>Natural</a> number to its point on the spiral
unSpiral :: Natural -> Pt

-- | <a>undefined</a>
--   
--   Convert a point to its position on the spiral
toSpiral :: Pt -> Natural

-- | <a>undefined</a>
--   
--   Get the next position on the spiral
stepSpiral :: Pt -> Pt

-- | Spiral example
--   
--   <pre>
--   (20, -2,  2) (21, -1,  2) (22, 0,  2) (23, 1,  3) (24, 2,  2) (25, 3,  2)
--   (19, -2,  1) ( 6, -1,  1) ( 7, 0,  1) ( 8, 1,  1) ( 9, 2,  1) (26, 3,  1)
--   (18, -2,  0) ( 5, -1,  0) ( 0, 0,  0) ( 1, 1,  0) (10, 2,  0) (27, 3,  0)
--   (17, -2, -1) ( 4, -1, -1) ( 3, 0, -1) ( 2, 1, -1) (11, 2, -1) (28, 3, -1)
--   (16, -2, -2) (15, -1, -2) (14, 0, -2) (13, 1, -2) (12, 2, -2) (29, 3, -2)
--   (35, -2, -3) (34, -1, -3) (33, 0, -3) (32, 1, -3) (31, 2, -3) (30, 3, -3)
--   </pre>
spiralExample :: ()

-- | Unwrapped spiral example:
--   
--   <pre>
--   (20, -2,  2)
--   (19, -2,  1)
--   (18, -2,  0)
--   (17, -2, -1)
--   (16, -2, -2)
--   (21, -1,  2)
--   ( 6, -1,  1)
--   ( 5, -1,  0)
--   ( 4, -1, -1)
--   (15, -1, -2)
--   (22, 0,  2)
--   ( 7, 0,  1)
--   ( 0, 0,  0)
--   ( 3, 0, -1)
--   (14, 0, -2)
--   (23, 1,  3)
--   ( 8, 1,  1)
--   ( 1, 1,  0)
--   ( 2, 1, -1)
--   (13, 1, -2)
--   (24, 2,  2)
--   ( 9, 2,  1)
--   (10, 2,  0)
--   (11, 2, -1)
--   (12, 2, -2)
--   (25, 3,  2)
--   (26, 3,  1)
--   (27, 3,  0)
--   (28, 3, -1)
--   (29, 3, -2)
--   </pre>
unwrappedSpiralExample :: ()

-- | Point examples
examples :: [Pt]
examples2 :: [Pt]

-- | Point simple algebraic relations
--   
--   <pre>
--   [begin, end] (begin, diff)
--   mult: val
--   
--   [0..0] (0, 0)
--   2: 1
--   [0..0] (0, 0)
--   3: -1
--   [0..1] (0, 1)
--   4: 2
--   [1..-1] (1, -2)
--   5: -2
--   [-1..2] (-1, 3)
--   6: 3
--   [2..-2] (2, -4)
--   7: -3
--   [-2..3] (-2, 5)
--   9: 4
--   [3..-3] (3, -6)
--   9: -4
--   [-3..4] (-3, 7)
--   10: 5
--   [4..-4] (4, -8)
--   </pre>
ptSimpleAlgRelations :: ()

-- | From <a>ptSimpleAlgRelations</a>
simpleAlgBegins :: [(Integer, Integer)]
simpleAlgDiffs :: [Integer]
simpleAlgMults :: [Integer]

-- | <a>ptSimpleAlgRelations</a> values:
--   
--   <pre>
--   1 -1
--   2 -2
--   3 -3
--   4 -4
--   5
--   </pre>
simpleAlgVals :: ()
pairList :: a -> a -> [a]

-- | <a>zipWith</a> on the tail of a list
--   
--   <pre>
--   λ&gt; zipWithTail pairList [1..5]
--   [[2,1],[3,2],[4,3],[5,4]]
--   </pre>
zipWithTail :: (a -> a -> b) -> [a] -> [b]

-- | <a>zip</a> on the tail of a list
--   
--   <pre>
--   λ&gt; zipTail [1..5]
--   [(2,1),(3,2),(4,3),(5,4)]
--   </pre>
zipTail :: [a] -> [(a, a)]

-- | Successive (first) differences
--   
--   <pre>
--   λ&gt; diffs [1..5]
--   [1,1,1,1]
--   </pre>
diffs :: Num a => [a] -> [a]
instance GHC.Classes.Ord Lib.Pt
instance GHC.Classes.Eq Lib.Pt
instance GHC.Show.Show Lib.Pt
instance GHC.Read.Read Lib.Pt
instance GHC.Num.Num Lib.Pt

module Data.CardinalDir

-- | Cardinal directions, ordered as follows:
--   
--   <pre>
--        N
--        1
--      8   2
--   W 7      3 E
--      6   4
--        5
--        S
--   </pre>
data CardinalDir
N :: CardinalDir
NE :: CardinalDir
E :: CardinalDir
SE :: CardinalDir
S :: CardinalDir
SW :: CardinalDir
W :: CardinalDir
NW :: CardinalDir

-- | Convert a point to its <a>CardinalDir</a>, relative to <tt>(0, 0)</tt>
toCardinalDir :: Pt -> CardinalDir

-- | Convert to <a>CardinalDir</a>, assuming <a>Pt</a> only contains values
--   in <tt>[-1, 0, 1]</tt>.
toCardinalDirUnsafe :: Pt -> CardinalDir

-- | Convert a <a>CardinalDir</a> to a <a>Pt</a>
fromCardinalDir :: CardinalDir -> Pt
instance GHC.Enum.Enum Data.CardinalDir.CardinalDir
instance GHC.Show.Show Data.CardinalDir.CardinalDir
instance GHC.Read.Read Data.CardinalDir.CardinalDir
instance GHC.Classes.Ord Data.CardinalDir.CardinalDir
instance GHC.Classes.Eq Data.CardinalDir.CardinalDir
